{"version":3,"sources":["components/AddCategory.js","helpers/getGifs.js","hooks/useFetchGifs.js","components/GiftGridItem.js","components/GifGrid.js","GifExpertApp.js","reportWebVitals.js","index.js"],"names":["AddCategory","setCategory","useState","inputValue","setInputValue","onSubmit","e","preventDefault","type","value","onChange","target","getGifs","category","a","url","encodeURI","fetch","resp","json","data","gifs","map","img","id","title","images","downsized_medium","useFetchGifs","loading","state","setState","useEffect","then","imgs","GiftGridItem","className","src","alt","GifGrid","GifExpertApp","categories","setCategories","includes","length","list","reportWebVitals","onPerfEntry","Function","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","document","getElementById"],"mappings":"mMA+BeA,EA5BK,SAAC,GAAqB,IAAnBC,EAAkB,EAAlBA,YAAkB,EAEDC,mBAAS,IAFR,mBAE9BC,EAF8B,KAElBC,EAFkB,KAcrC,OACI,sBAAMC,SAPW,SAACC,GAClBA,EAAEC,iBACFN,EAAYE,GACZC,EAAc,KAId,SACI,uBACII,KAAK,OACLC,MAAON,EACPO,SAfc,SAACJ,GACvBF,EAAcE,EAAEK,OAAOF,a,+BCMhBG,EAdF,uCAAG,WAAOC,GAAP,uBAAAC,EAAA,6DACNC,EADM,0FACmFC,UAAUH,GAD7F,gDAEOI,MAAMF,GAFb,cAENG,EAFM,gBAGWA,EAAKC,OAHhB,uBAGJC,EAHI,EAGJA,KACFC,EAAOD,EAAKE,KAAI,SAAAC,GAAQ,IAAD,EACzB,MAAO,CACHC,GAAID,EAAIC,GACRC,MAAOF,EAAIE,MACXV,IAAG,UAAEQ,EAAIG,cAAN,aAAE,EAAYC,iBAAiBZ,QAR9B,kBAWLM,GAXK,4CAAH,sDCqBEO,EAlBM,SAACf,GAAc,IAAD,EACLX,mBAAS,CAC/BkB,KAAM,GACNS,SAAS,IAHkB,mBACxBC,EADwB,KACjBC,EADiB,KAe/B,OATAC,qBAAU,WACNpB,EAAQC,GAAUoB,MAAM,SAAAC,GACpBH,EAAS,CACLX,KAAMc,EACNL,SAAS,SAGlB,CAAChB,IAEGiB,GCPIK,EATM,SAAC,GAAuB,EAArBX,GAAsB,IAAlBC,EAAiB,EAAjBA,MAAOV,EAAU,EAAVA,IAC/B,OACI,sBAAKqB,UAAU,yCAAf,UACI,qBAAKC,IAAKtB,EAAKuB,IAAKb,IACpB,kCAAKA,SCmBFc,EArBC,SAAC,GAAkB,IAAhB1B,EAAe,EAAfA,SAAe,EAEGe,EAAaf,GAAjCa,EAFiB,EAEtBN,KAAaS,EAFS,EAETA,QAErB,OACI,qCACI,6BAAKhB,IACJgB,GAAW,mBAAGO,UAAU,mCAAb,wBACZ,qBAAKA,UAAU,YAAf,SAEQV,EAAOJ,KAAI,SAAAC,GAAG,OACV,cAAC,EAAD,eAEQA,GADCA,EAAIC,aCctBgB,EA1BM,WAAO,IAAD,EAEatC,mBAAS,CAAC,gBAFvB,mBAEhBuC,EAFgB,KAEJC,EAFI,KAUvB,OACI,qCACI,8CACA,uBACA,cAAC,EAAD,CAAazC,YAVD,SAACY,GACb4B,EAAWE,SAAS9B,IACpBA,EAAS+B,QAAU,GACvBF,GAAc,SAAAG,GAAI,OAAKhC,GAAL,mBAAkBgC,UAQhC,6BAEQJ,EAAWnB,KAAI,SAAAT,GAAQ,OACnB,cAAC,EAAD,CAASA,SAAUA,GAAeA,YCV3CiC,G,MAZS,SAAAC,GAClBA,GAAeA,aAAuBC,UACxC,6BAAqBf,MAAK,YAAkD,IAA/CgB,EAA8C,EAA9CA,OAAQC,EAAsC,EAAtCA,OAAQC,EAA8B,EAA9BA,OAAQC,EAAsB,EAAtBA,OAAQC,EAAc,EAAdA,QAC3DJ,EAAOF,GACPG,EAAOH,GACPI,EAAOJ,GACPK,EAAOL,GACPM,EAAQN,QCDdO,IAASC,OACP,cAAC,EAAD,IACAC,SAASC,eAAe,SAM1BX,M","file":"static/js/main.507f01e4.chunk.js","sourcesContent":["import React, { useState } from 'react'\nimport PropTypes from 'prop-types';\n\nconst AddCategory = ({ setCategory }) => {\n\n    const [inputValue, setInputValue] = useState(\"\")\n\n    const handleInputChange = (e) => {\n        setInputValue(e.target.value)\n    }\n\n    const handleSubmit = (e) => {\n        e.preventDefault();\n        setCategory(inputValue);\n        setInputValue(\"\");\n    }\n\n    return (\n        <form onSubmit={handleSubmit} >\n            <input\n                type=\"text\"\n                value={inputValue}\n                onChange={handleInputChange} />\n        </form>\n    )\n}\n\nAddCategory.propTypes = {\n    setCategory: PropTypes.func.isRequired,\n}\n\nexport default AddCategory\n","const getGifs = async (category) => {\n    const url = `https://api.giphy.com/v1/gifs/search?api_key=Yc6LaqRYr99eZMa42xcwLU5Vw7ltzRR9&q=${encodeURI(category)}&limit=10&offset=0&rating=g&lang=en`;\n    const resp = await fetch(url);\n    const { data } = await resp.json();\n    const gifs = data.map(img => {\n        return {\n            id: img.id,\n            title: img.title,\n            url: img.images?.downsized_medium.url,\n        }\n    });\n    return gifs;\n}\n\nexport default getGifs;","import { useState, useEffect } from \"react\"\nimport getGifs from \"../helpers/getGifs\"\n\nconst useFetchGifs = (category) => {\n    const [state, setState] = useState({\n        data: [],\n        loading: true,\n    })\n\n    useEffect(() => {\n        getGifs(category).then( imgs => {\n            setState({\n                data: imgs,\n                loading: false,\n            });\n        });\n    }, [category])\n\n    return state;\n}\n\nexport default useFetchGifs\n","import React from 'react'\n\nconst GiftGridItem = ({ id, title, url }) => {\n    return (\n        <div className=\"card animate__animated animate__fadeIn\">\n            <img src={url} alt={title} />\n            <p> {title}</p>\n        </div>\n    )\n}\n\nexport default GiftGridItem\n","import React from 'react'\nimport useFetchGifs from '../hooks/useFetchGifs'\nimport GiftGridItem from './GiftGridItem';\n\nconst GifGrid = ({ category }) => {\n\n    const { data:images, loading } = useFetchGifs(category);\n\n    return (\n        <>\n            <h3>{category}</h3>\n            {loading && <p className=\"animate__animated animate__flash\">Loading...</p>}\n            <div className=\"card-grid\">\n                {\n                    images.map(img =>\n                        <GiftGridItem\n                            key={img.id}\n                            {...img} />\n                    )\n                }\n            </div>\n        </>\n    )\n}\n\nexport default GifGrid\n","import React, { useState } from 'react'\nimport AddCategory from './components/AddCategory'\nimport GifGrid from './components/GifGrid'\n\nconst GifExpertApp = () => {\n\n    const [categories, setCategories] = useState(['Dragon Ball'])\n\n    const setCategory = (category) => {\n        if (categories.includes(category)) return;\n        if (category.length <= 0) return;\n        setCategories(list => [category, ...list])\n    }\n\n    return (\n        <>\n            <h2>GifExpertApp</h2>\n            <hr />\n            <AddCategory setCategory={setCategory} />\n            <ol>\n                {\n                    categories.map(category =>\n                        <GifGrid category={category} key={category} />\n                    )\n                }\n            </ol>\n        </>\n    );\n}\n\nexport default GifExpertApp\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport GifExpertApp from './GifExpertApp';\nimport './index.css';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <GifExpertApp />,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();"],"sourceRoot":""}